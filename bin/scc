######################################################################
#!/bin/sh -x
#
# 复制本脚本到/etc/init.d/既可以使用系统service start/stop/restart scc服务
# pm2一定要使用root用户安装到全局
# 脚本需要sudo执行
# 修订历史
#####################################################################
# 2016-04-27  yanghuan@romenscd.cn  修复pm2启动环境变量问题
# 2016-04-26  yanghuan@romenscd.cn  修改启动方式为pm2进程管理

#PM2运行需要的环境变量
NAME=pm2
PM2=/usr/lib/node_modules/pm2/bin/pm2
USER=nodejs
DEFAULT=/etc/default/$NAME
export PATH=/usr/bin:$PATH
export PM2_HOME="/home/romens/.pm2"

NODE_ENV="development"
PORT=3300
FT_PORT=3301
OFF_PORT=3302
APP_DIR="/var/data/wwwroot/EDI/current"
NODE_APP="app.js"
CONFIG_DIR="$APP_DIR"
PM2_CONFIG_FILE="$APP_DIR/config/pm2.json"
PID_DIR="$APP_DIR/pid"
PID_FILE="/tmp/_scc_${PORT}.pid"
LOG_DIR="/var/log/scc"
LOG_PREFIX="scc-${PORT}"
LOG_FILE="${LOG_DIR}/${LOG_PREFIX}.log"
LOG_ARCHIVE_FILE="${LOG_DIR}/${LOG_PREFIX}_`date +%Y%m%d%H%M%S`.log"
START_ARGS="-h localhost -p ${PORT}"
FRONTAIL="/usr/bin/frontail"
APP_NAME=$PORT
OFFLINE=0

USAGE="Usage: $0 {start|stop|restart|status} [--force]"

APP_WITH_OFFLINE() {
cat << EOF > $APP_DIR/config/app.json
{
  "apps": [
    {
      "name": "$APP_NAME-$PORT",
      "cwd": "$APP_DIR",
      "script": "app.js",
      "args": "-p ${PORT}",
      "force" : true,
      "exec_mode" : "fork",
      "error_file" : "$LOG_DIR/$PORT.log",
      "out_file": "$LOG_DIR/$PORT.log",
      "pid_file": "/tmp/_scc_${PORT}.pid",
      "watch": true,
    },
    {
      "name": "$APP_NAME-$PORT-OFFLINE",
      "cwd": "$APP_DIR",
      "script": "app.js",
      "args": "-s",
      "force" : true,
      "exec_mode" : "fork",
      "error_file" : "$LOG_DIR/$PORT-OFFLINE.log",
      "out_file": "$LOG_DIR/$PORT-OFFLINE.log",
      "pid_file": "/tmp/_scc_${PORT}-OFFLINE.pid",
      "watch": true,
      }
  ]
}
EOF

}
APP_WITHOUT_OFFLINE() {
cat << EOF > $APP_DIR/config/app.json
{
  "apps": [
    {
      "name": "$APP_NAME-$PORT",
      "cwd": "$APP_DIR",
      "script": "app.js",
      "args": "-p ${PORT}",
      "force" : true,
      "exec_mode" : "fork",
      "error_file" : "$LOG_DIR/$PORT.log",
      "out_file": "$LOG_DIR/$PORT.log",
      "pid_file": "/tmp/_scc_${PORT}.pid",
      "watch": true,
    },
  ]
}
EOF



start() {
	if [ $OFFLINE -eq 1 ]
	then
		APP_WITH_OFFLINE
		pm2 start ${APP_DIR}/config/app.json

		PID_FILE_NEW=`pm2 show $APP_NAME-$PORT | grep "pid path" | awk -F " " '{print $5}'`
		LOG_FILE_NEW=`pm2 show $APP_NAME-$PORT | grep "out log path" | awk -F " " '{print $6}'`
		LOG_FILE_NEW_OFF=`pm2 show $APP_NAME-$PORT-OFFLINE | grep "out log path" | awk -F " " '{print $6}'`

		echo "Start Frontail: logs to http://localhost:${FT_PORT}"
		echo "Writing to log: ${LOG_FILE_NEW}"
		$FRONTAIL -p ${FT_PORT} ${LOG_FILE_NEW} &
		echo "Start Frontail: logs to http://localhost:${OFF_PORT}"
		echo "Writing to offline task log: ${LOG_FILE_NEW_OFF}"
		$FRONTAIL -p ${OFF_PORT} ${LOG_FILE_NEW_OFF} &

	else
		APP_WITHOUT_OFFLINE
		pm2 start ${APP_DIR}/config/app.json

		LOG_FILE_NEW=`pm2 show $APP_NAME-$PORT | grep "out log path" | awk -F " " '{print $6}'`

		echo "Start Frontail: logs to http://localhost:${FT_PORT}"
		echo "Writing to log: ${LOG_FILE_NEW}"
		$FRONTAIL -p ${FT_PORT} ${LOG_FILE_NEW} &
	fi
}

get_pid() {
	PID_FILE_NEW=`pm2 show $APP_NAME-$PORT | grep "pid path" | awk -F " " '{print $5}'`
    echo "$(cat "$PID_FILE_NEW")"
}

get_off_pid() {
	PID_FILE_NEW_OFF=`pm2 show $APP_NAME-$PORT-OFFLINE | grep "pid path" | awk -F " " '{print $5}'`
	echo "$(cat "$PID_FILE_NEW_OFF")"
}

is_running() {
    PID=$(get_pid)
    ! [ -z "$(ps -ef | grep "$PID" | grep node | grep -v "grep")" ]
}
if_off_running() {
	PID=$(get_off_pid)
	! [ -z "$(ps -ef | grep "$PID" | grep node | grep -v "grep")" ]
}

stop() {
	if is_off_running
	then
		fuser -k -n tcp $FT_PORT
		fuser -k -n tcp $OFF_PORT
	else
		fuser -k -n tcp $FT_PORT
	fi
	pm2 stop ${APP_DIR}/config/app.json
}

status() {
	if is_running && [ $OFFLINE -eq 0 ]
	then
		echo "service is running"
	elif is_running && [ $OFFLINE -eq 1 ]
	then
		if is_off_running
		then
			echo "service is running"
		else
			echo "offline task is not running"
		fi
	else
		echo "service is not running"
	fi
}

case "$2" in
    --force)
        FORCE_OP=true
    ;;
    -s)
        OFFLINE=1
    ;;

    "")
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac

case "$1" in
    start)
        start
    ;;

    stop)
        stop
    ;;

    restart)
        stop
        start
    ;;

    status)
        status
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac
